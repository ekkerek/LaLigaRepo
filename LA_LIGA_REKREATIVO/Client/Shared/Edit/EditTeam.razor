@using LA_LIGA_REKREATIVO.Shared.Dto;
@using Newtonsoft.Json;
@using System.Net.Http.Headers;
@using LA_LIGA_REKREATIVO.Client.Server;
@inject Server Server
@inject IMessageService MessageService


<Modal Title="Edit team"
       Visible="true"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <Form Model="team"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed"
          LabelColSpan="8"
          WrapperColSpan="16"
          @ref="@addTeamForm">
        @*         <FormItem Label="Select League">
        <SimpleSelect DefaultValue="@defaultLeagueId" Style="width:120px;" OnSelectedItemChanged="SelectLeague">
        <SelectOptions>
        @foreach (var league in leagues)
        {
        <SimpleSelectOption Value="@league.Id.ToString()" Label="@league.Name"></SimpleSelectOption>
        }
        </SelectOptions>
        </SimpleSelect>
        </FormItem> *@
        <FormItem Label="Select League">
           @*  <Select Mode="multiple"
                    @bind-Values="@_selectedValues2"
                    Placeholder="Please select"
                    TItemValue="string"
                    TItem="string"
                    Style="width: 100%; margin-bottom: 8px;">
                <SelectOptions>
                    @foreach (var league in leagues)
                    {
                        <SelectOption TItemValue="string" TItem="string" Value=@league.Id.ToString() Label=@league.Name />
                    }
                </SelectOptions>
            </Select> *@
            <Select Mode="multiple"
                    TItem="LeagueDto"
                    TItemValue="int"
                    DataSource="@leagues"
                    DefaultValues="selectedLeagues.Select(x=> x.Id)"
                    LabelName="@nameof(LeagueDto.Name)"
                    ValueName="@nameof(LeagueDto.Id)"
                    Style="width: 200px"
                    Placeholder="Select leagues"
                    IgnoreItemChanges="false"
                    OnSelectedItemsChanged="OnSelectedLeagues"
                    AllowClear>
            </Select>
        </FormItem>
        <FormItem Label="Name">
            <Input @bind-Value="context.Name" />
        </FormItem>
        <FormItem Label="Logo">
            <Input @bind-Value="context.LogoSrc" />
        </FormItem>
    </Form>
</Modal>

@code {
    [Parameter] public EventCallback CloseModal { get; set; }
    [Parameter] public int Id { get; set; }
    private Form<TeamDto> addTeamForm = null!;
    private TeamDto team = new();
    private List<LeagueDto> leagues = new();
    private HashSet<LeagueDto> selectedLeagues = new();
    private LeagueDto league = new();
    private bool submitting;
    // private string defaultLeagueId;
    // public IEnumerable<string> _selectedValues1, _selectedValues2;

    protected async override Task OnParametersSetAsync()
    {
        team = await Server.Teams.Get(Id);
        var result = await Server.Leagues.Get();
        leagues = result.ToList();
        selectedLeagues = team.Leagues.ToHashSet();
    }

    // protected override async Task OnInitializedAsync()
    // {
    //     team = await Server.Teams.Get(Id);
    //     var result = await Server.Leagues.Get();
    //     leagues = result.ToList();
    //     selectedLeagues = team.Leagues.ToHashSet();
    //     //_selectedValues2 = leagues.Where(x => team.Leagues.Select(x=> x.Id).Contains(x.Id)).Select(x=> x.Id.ToString()).ToList();
    //     // var pp = leagues.FirstOrDefault(x => x.Teams.Contains(team)).Id.ToString();
    //     // defaultLeagueId = leagues.FirstOrDefault(x => x.Teams.Contains(team)).Id.ToString();
    // }

    public async Task HandleOk(MouseEventArgs e)
    {
        submitting = true;
        addTeamForm.Submit();
    }

    private async Task HandleCancel(MouseEventArgs e)
    {
        await CloseModal.InvokeAsync();
    }

    private async Task OnFinish(EditContext editContext)
    {
        team.Leagues.Clear();
        team.Leagues.AddRange(selectedLeagues);
        var result = await Server.Teams.Update(team);
        if (result)
            _ = MessageService.Success("New team is added.");

        await CloseModal.InvokeAsync();
    }

    private void OnFinishFailed(EditContext editContext)
    {
        ///Console.WriteLine($"Failed:{JsonSerializer.Serialize(player.LastName)}");
    }

    // public void SelectLeague(string value)
    // {
    //     var leagueId = Int32.Parse(value);
    //     league.Id = leagueId;
    //     league.Name = leagues.FirstOrDefault(x => x.Id == leagueId).Name;
    // }

    private void OnSelectedLeagues(IEnumerable<LeagueDto> leagues)
    {
        selectedLeagues = leagues.ToHashSet();
    }
}
