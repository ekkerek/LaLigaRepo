@using LA_LIGA_REKREATIVO.Shared.Dto;
@using LA_LIGA_REKREATIVO.Client.Server;
@inject Server Server
@inject IMessageService MessageService

<h3>AddNewMatch</h3>

@if (showAddSummaryModal)
{
    <AddNewSummary OnChange="AddNewSummary" CloseCallback="CloseSummaryModal" Players="@matchPlayers"></AddNewSummary>
}

<Modal Title="Add new match"
       Visible="true"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <Form Model="match"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed"
          LabelColSpan="8"
          WrapperColSpan="16"
    @ref="@addMatchForm">
        <FormItem Label="Select League">
            <SimpleSelect DefaultValue="lucy" Style="width:120px;" OnSelectedItemChanged="SelectLeague">
                <SelectOptions>
                    @foreach (var league in leagues)
                    {
                        <SimpleSelectOption Value="@league.Id.ToString()" Label="@league.Name"></SimpleSelectOption>
                    }
                </SelectOptions>
            </SimpleSelect>
        </FormItem>
        <FormItem Label="Home Team">
            <SimpleSelect DefaultValue="lucy" Style="width:120px;" OnSelectedItemChanged="SelectHomeTeam">
                <SelectOptions>
                    @foreach (var team in teams)
                    {
                        <SimpleSelectOption Value="@team.Id.ToString()" Label="@team.Name"></SimpleSelectOption>
                    }

                </SelectOptions>
            </SimpleSelect>
        </FormItem>
        <FormItem Label="Away Team">
            <SimpleSelect DefaultValue="lucy" Style="width:120px;" OnSelectedItemChanged="SelectAwayTeam">
                <SelectOptions>
                    @foreach (var team in teams)
                    {
                        <SimpleSelectOption Value="@team.Id.ToString()" Label="@team.Name"></SimpleSelectOption>
                    }

                </SelectOptions>
            </SimpleSelect>
        </FormItem>
        <FormItem Label="Home Team Goals">
            <Input Type="number" @bind-Value="context.HomeTeamGoals" />
        </FormItem>
        <FormItem Label="Away Team Goals">
            <Input Type="number" @bind-Value="context.AwayTeamGoals" />
        </FormItem>

        <FormItem Label="Game Time">
            <DatePicker @bind-Value="context.GameTime" TValue="DateTime" ShowTime="@true" Format="yyyy-MM-ddTHH:mm" Mask="yyyy-MM-ddTHH:mm" Placeholder="@("yyyy-MM-ddTHH:mm")" />
        </FormItem>
        <FormItem Label="Game Round">
            <Input @bind-Value="context.GameRound" />
        </FormItem>
        <FormItem Label="Game Place">
            <Input @bind-Value="context.GamePlace" />
        </FormItem>
        <FormItem>
            <Button OnClick="OpenAddSummaryModal">Add new summary</Button>
        </FormItem>
        <Button OnClick="GetPlayerSummaries"></Button>
    </Form>
</Modal>

@code {

    [Parameter] public EventCallback CloseModal { get; set; }
    private Form<MatchDto> addMatchForm = null!;
    private MatchDto match = new MatchDto();
    private PlayerDto player = new PlayerDto();
    private List<TeamDto> teams = new();
    private List<PlayerDto> matchPlayers = new();
    private List<LeagueDto> leagues = new();
    private int selectedTeamId = 0;
    private bool showAddSummaryModal;
    private bool submitting;

    protected async override Task OnInitializedAsync()
    {
        var resultTeams = await Server.Teams.Get();
        teams = resultTeams.ToList();
        var resultPlayers = await Server.Players.Get();
        matchPlayers = resultPlayers.ToList();
        var resultLeague = await Server.Leagues.Get();
        leagues = resultLeague.ToList();

        base.OnInitialized();
    }

    public async Task HandleOk(MouseEventArgs e)
    {
        submitting = true;
        addMatchForm.Submit();
    }

    private async Task HandleCancel(MouseEventArgs e)
    {
        await CloseModal.InvokeAsync();
    }

    private async Task OnFinish(EditContext editContext)
    {
        var result = await Server.Matches.Add(match);
        if (result)
            _ = MessageService.Success("New match is added.");

        await CloseModal.InvokeAsync();
    }

    private void OnFinishFailed(EditContext editContext)
    {
        ///Console.WriteLine($"Failed:{JsonSerializer.Serialize(player.LastName)}");
    }

    public void SelectHomeTeam(string value)
    {
        var homeSelectedTeamId = Int32.Parse(value);
        match.HomeTeam = teams.FirstOrDefault(x => x.Id == homeSelectedTeamId);
        match.Players.AddRange(matchPlayers.Where(x => x.TeamId == match.HomeTeam.Id).ToList());
    }

    public void SelectAwayTeam(string value)
    {
        var awaySelectedTeamId = Int32.Parse(value);
        match.AwayTeam = teams.FirstOrDefault(x => x.Id == awaySelectedTeamId);
        match.Players.AddRange(matchPlayers.Where(x => x.TeamId == match.AwayTeam.Id).ToList());
    }

    public void AddNewSummary(SummaryDto summary)
    {
        match.Summaries.Add(summary);
        showAddSummaryModal = false;
    }

    public void OpenAddSummaryModal()
    {
        showAddSummaryModal = true;
    }

    private void CloseSummaryModal()
    {
        showAddSummaryModal = false;
    }

    //TODO: It will be deleted
    protected async void GetPlayerSummaries()
    {
        var playerStat = await Server.Players.GetPlayerStats();
        var kk = playerStat;
    }

    public void SelectLeague(string value)
    {
        var leagueId = Int32.Parse(value);
        LeagueDto tempLeague = new()
            {
                Id = leagueId,
                Name = leagues.FirstOrDefault(x => x.Id == leagueId).Name,
                Year = leagues.FirstOrDefault(x => x.Id == leagueId).Year
            };
        match.League = tempLeague;
    }
}
