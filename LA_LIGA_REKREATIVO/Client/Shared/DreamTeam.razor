@using LA_LIGA_REKREATIVO.Client.Services
@using LA_LIGA_REKREATIVO.Shared.Dto
@using LA_LIGA_REKREATIVO.Client.Server;
@inject Server Server
@inject NavigationManager Navigation
@inject FileService _fileService;

<Spin Spinning=loading>

    <Select TItem="LeagueDto"
            TItemValue="int?"
            DataSource="@leagues"
            DefaultValue="@defaultLeagueId"
            LabelName="@nameof(LeagueDto.Name)"
            ValueName="@nameof(PlayerDto.Id)"
            Style="width: 200px"
            Placeholder="Select a league"
            IgnoreItemChanges="false"
            OnSelectedItemChanged="OnSelectedLeague"
            AllowClear>
    </Select>


    <AntList Class="demo-loadmore-list" DataSource="@stats" ItemLayout="ListItemLayout.Horizontal" Loading="@InitLoading">
        <ChildContent Context="item">
            <ListItem>
                <ListItemMeta>
                    <TitleTemplate>
                        <span>
                            <img style="height:34px; width:34px; border-radius: 50%;" src="@_fileService.GetImagePath(item.Player.Picture)" />
                        </span>
                        <span>
                            <a @onclick="() => GoToProfilePage(item.Player.Id)">@item.Player.FirstName @item.Player.LastName</a>
                        </span>
                    </TitleTemplate>
                </ListItemMeta>
                <div>@item?.TotalPoints</div>
            </ListItem>
        </ChildContent>
    </AntList>

</Spin>

@code {
    private List<PlayerStatsDto> stats = new();
    private List<LeagueDto> leagues = new();
    public bool InitLoading { get; set; } = true;
    public bool Loading { get; set; } = false;
    public int count = 6;
    public int multiple = 1;
    int defaultLeagueId;
    private bool loading;


    protected override async Task OnParametersSetAsync()
    {
        loading = true;
        var result = await Server.Leagues.Get();
        leagues = result.ToList();
        var resStats = await Server.Players.GetDreamTeamOverall();
        stats = resStats.Take(6).ToList();
        defaultLeagueId = leagues.FirstOrDefault(x => x.IsOverallLeague).Id;
        InitLoading = false;
        loading = false;
    }

    private void GoToProfilePage(int id)
    {
        Navigation.NavigateTo($"/playerProfile/{id}");
    }

    private async Task OnSelectedLeague(LeagueDto league)
    {
        if (league is null) return;

        loading = true;
        List<PlayerStatsDto> resStats = new();
        if (league.IsOverallLeague)
        {
            var res = await Server.Players.GetDreamTeamOverall();
            resStats = res.ToList();
        }
        else
        {
            var res = await Server.Players.GetDreamTeamByLeague(league.Id);
            resStats = res.ToList();
        }

        stats = resStats.ToList();
        StateHasChanged();
        loading = false;
    }
}
