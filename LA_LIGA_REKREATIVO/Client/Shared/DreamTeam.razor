@using LA_LIGA_REKREATIVO.Client.Services
@using LA_LIGA_REKREATIVO.Shared.Dto
@using LA_LIGA_REKREATIVO.Client.Server;

@inject Server Server
@inject NavigationManager Navigation
@inject FileService _fileService;

<Spin Spinning=loading>

    <Select TItem="LeagueDto"
            TItemValue="int?"
            DataSource="@leagues"
            DefaultValue="@defaultLeagueId"
            LabelName="@nameof(LeagueDto.Name)"
            ValueName="@nameof(PlayerDto.Id)"
            Style="width: 100%; padding-bottom: 12px;"
            Placeholder="Select a league"
            IgnoreItemChanges="false"
            OnSelectedItemChanged="OnSelectedLeague"
            AllowClear>
    </Select>

    @if (stats.Count() > 0)
    {
        <Card BodyStyle="padding: 0px;" Size="small">
            <TitleTemplate>
                <span style="display: flex; justify-content: center; font-size: large;">
                    Dream team
                </span>
            </TitleTemplate>

            <Body>
                <div style="height: 65dvh;" class="klasa">
                    <GridRow Style="height: 33%;">
                        @for (int i = 0; i < 2; i++)
                        {
                            <GridCol Style="display: flex; justify-content: center; align-items: center;" Span="12">
                                @if (stats.Count > i)
                                {
                                    <div>
                                        <div class="dream-team-containter">
                                            <div class="dream-team-div">
                                                <a @onclick="() => GoToProfilePage(stats[i].Player.Id)">
                                                    <img class="dream-team-img" src="@_fileService.GetImagePath(stats[i].Player.Picture)" />
                                                </a>
                                            </div>
                                        </div>
                                        <div style="display: flex; justify-content: center; color: white; font-weight: 600;">
                                            @stats[i].Player.FullName
                                        </div>
                                        <div style="display: flex; justify-content: center; color: white; font-weight: 600;">
                                            @stats[i].TotalPoints <Icon Style="position: relative; top: 4px;" Type="star" Theme="fill" />
                                        </div>
                                    </div>
                                }
                            </GridCol>
                        }
                    </GridRow>

                    <GridRow style="height: 33%;">
                        @for (int i = 2; i < 4; i++)
                        {
                            <GridCol Style="display: flex; justify-content: center; align-items: center;" Span="12">
                                @if (stats.Count > i)
                                {
                                    <div>
                                        <div class="dream-team-containter">
                                            <div class="dream-team-div">
                                                <a @onclick="() => GoToProfilePage(stats[i].Player.Id)">
                                                    <img class="dream-team-img" src="@_fileService.GetImagePath(stats[i].Player.Picture)" />
                                                </a>
                                            </div>
                                        </div>
                                        <div style="display: flex; justify-content: center; color: white; font-weight: 600;">
                                            @stats[i].Player.FullName
                                        </div>
                                        <div style="display: flex; justify-content: center; color: white; font-weight: 600;">
                                            @stats[i].TotalPoints <Icon Style="position: relative; top: 4px;" Type="star" Theme="fill" />
                                        </div>
                                    </div>
                                }
                            </GridCol>
                        }
                    </GridRow>

                    <GridRow style="height: 33%;">
                        <GridCol Style="display: flex; justify-content: center; align-items: center;" Span="24">
                            @{
                                var gk = stats.FirstOrDefault(x => x.Player.IsGk);
                            }
                            @if (gk != null)
                            {
                                <div>
                                    <div class="dream-team-containter">
                                        <div class="dream-team-div">
                                            <a @onclick="() => GoToProfilePage(gk.Player.Id)">
                                                <img class="dream-team-img" src="@_fileService.GetImagePath(gk.Player.Picture)" />
                                            </a>
                                        </div>
                                    </div>
                                    <div style="display: flex; justify-content: center; color: white; font-weight: 600;">
                                        @gk.Player.FullName (GK)
                                    </div>
                                    <div style="display: flex; justify-content: center; color: white; font-weight: 600;">
                                        @gk.TotalPoints <Icon Style="position: relative; top: 4px;" Type="star" Theme="fill" />
                                    </div>
                                </div>
                            }
                        </GridCol>
                    </GridRow>
                </div>
            </Body>
        </Card>


        <Card Style="width: 100%; margin-top: 1rem;" Size="small">
            <TitleTemplate>
                <span style="display: flex; justify-content: center; font-size: large;">
                    Subs
                </span>
            </TitleTemplate>
            <Body>
                <AntList Class="demo-loadmore-list" DataSource="@statsSub" ItemLayout="ListItemLayout.Horizontal" Loading="@InitLoading">
                    <ChildContent Context="item">
                        <ListItem Style="padding: 2px 0;">
                            <ListItemMeta>
                                <TitleTemplate>
                                    <span>
                                        <a @onclick="() => GoToProfilePage(item.Player.Id)">
                                            <img class="player-img" src="@_fileService.GetImagePath(item.Player.Picture)" />
                                        </a>
                                    </span>

                                    <span>
                                        <a style="display: inline-grid" @onclick="() => GoToProfilePage(item.Player.Id)">
                                            <span>
                                                @item.Player.FullName
                                                @if (item.Player.IsGk)
                                                {
                                                    <span> (GK) </span>
                                                }
                                            </span>
                                            <span style="font-size: smaller"> @item.Team.Name </span>
                                        </a>
                                    </span>
                                </TitleTemplate>
                            </ListItemMeta>
                            <div>@item?.TotalPoints <Icon Type="star" Theme="fill" /></div>
                        </ListItem>
                    </ChildContent>
                </AntList>
            </Body>
        </Card>

    }

    @*  @if (isOverallLeague)
    {
        <Divider Style="margin-top: 0px;margin-bottom: 12px;" />
        <span style="color:red;">*</span> <span style="font-style: italic; font-size: small"> Fantazi bodovi u zajedničkoj ligi se množe sa koeficijnom lige u kojoj su bodovi ostvarni</span>
    } *@


</Spin>


<style>
    .klasa {
        background-image: url("./teren4.jpg");
        background-size: cover;
        background-position: center;
    }
</style>

@code {
    private List<PlayerStatsDto> stats = new();
    private List<PlayerStatsDto> statsSub = new();
    private List<LeagueDto> leagues = new();
    public bool InitLoading { get; set; } = true;
    public bool Loading { get; set; } = false;
    public int count = 6;
    public int multiple = 1;
    int defaultLeagueId;
    private bool loading;
    private bool isOverallLeague = true;


    protected override async Task OnParametersSetAsync()
    {
        loading = true;
        var result = await Server.Leagues.Get();
        leagues = result.ToList();
        if (leagues.Any())
        {
            if (leagues.FirstOrDefault(x => x.IsOverallLeague) is not null)
            {
                defaultLeagueId = leagues.FirstOrDefault(x => x.IsOverallLeague).Id;
                isOverallLeague = true;
                var resStats = await Server.Players.GetDreamTeamOverall();
                stats = resStats.ToList();
                var resStatsSub = await Server.Players.Get2ndDreamTeamOverall();
                statsSub = resStatsSub.ToList();
            }
            else
            {
                defaultLeagueId = leagues.FirstOrDefault().Id;
                isOverallLeague = false;
                var resStats = await Server.Players.GetDreamTeamByLeague(defaultLeagueId);
                stats = resStats.ToList();
                var resStatsSub = await Server.Players.Get2ndDreamTeamByLeague(defaultLeagueId);
                statsSub = resStatsSub.ToList();
            }
        }
        InitLoading = false;
        loading = false;
    }

    private void GoToProfilePage(int id)
    {
        Navigation.NavigateTo($"/playerProfile/{id}");
    }

    private async Task OnSelectedLeague(LeagueDto league)
    {
        if (league is null) return;

        loading = true;
        List<PlayerStatsDto> resStats = new();
        if (league.IsOverallLeague)
        {
            var res = await Server.Players.GetDreamTeamOverall();
            stats = res.ToList();
            var resSub = await Server.Players.Get2ndDreamTeamOverall();
            statsSub = resSub.ToList();
            isOverallLeague = true;
        }
        else
        {
            var res = await Server.Players.GetDreamTeamByLeague(league.Id);
            stats = res.ToList();
            var resSub = await Server.Players.Get2ndDreamTeamByLeague(league.Id);
            statsSub = resSub.ToList();
            isOverallLeague = false;
        }

        StateHasChanged();
        loading = false;
    }
}
