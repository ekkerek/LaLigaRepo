@using LA_LIGA_REKREATIVO.Shared.Dto;
@using LA_LIGA_REKREATIVO.Shared.Models;

@{
    RenderFragment footer =
    @<Template>
        <Button OnClick="CreateSummary" @key="@( "apply" )" Type="primary">Create</Button>
        <Button OnClick="@Close" @key="@( "back" )">Close</Button>
    </Template>
    ;
}

<Modal Title="Create new configuration"
       Visible="true"
       OnOk="CreateSummary"
       OnCancel="@Close">
    <GridRow>
        <GridCol Span="12">Config name</GridCol>
        <GridCol Span="12">
             <SimpleSelect DefaultValue="lucy" Style="width:120px;" OnSelectedItemChanged="setSummaryPlayer">
                <SelectOptions>
                    @foreach (var player in Players)
                    {
                        <SimpleSelectOption Value="@player.Id.ToString()" Label="@player.FirstName"></SimpleSelectOption>
                    }

                </SelectOptions>
            </SimpleSelect>
        </GridCol>
    </GridRow>
    <GridRow>
        <GridCol Span="12">Overwrite selected config:</GridCol>
        <GridCol Span="12"><Input Type="number" Value="@summary.Time" /></GridCol>
    </GridRow>
     <GridRow>
        <GridCol Span="12">Overwrite selected config:</GridCol>
        <GridCol Span="12">
            <EnumSelect TEnum="SummaryType" OnSelectedItemChanged="setSummaryType"></EnumSelect>
            </GridCol>
    </GridRow>

</Modal>


@code {
    [Parameter] public List<PlayerDto> Players { get; set; }
    [Parameter] public EventCallback<SummaryDto> OnChange { get; set; }
     [Parameter] public EventCallback CloseCallback { get; set; }
    public SummaryDto summary = new();
    public int selectedPlayerId = 0;


    void setSummaryType(SummaryType summaryType)
    {
        summary.Type = summaryType;
    }

    void setSummaryPlayer(string value)
    {
        selectedPlayerId = Int32.Parse(value);
        summary.Player = Players.FirstOrDefault(x => x.Id == selectedPlayerId);
    }

       public async Task CreateSummary()
    {
         if (OnChange.HasDelegate)
            await OnChange.InvokeAsync(summary);
        StateHasChanged();
    }

    private void Close(MouseEventArgs e)
    {
        CloseCallback.InvokeAsync();
    }
}
