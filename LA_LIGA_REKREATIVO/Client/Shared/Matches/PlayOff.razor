@using LA_LIGA_REKREATIVO.Client.Server;
@using LA_LIGA_REKREATIVO.Shared.Dto

@inject Server Server

@if (Matches is not null && Matches.Count() > 0)
{
    <Card Size="small" TitleTemplate="@Title">
        <CardTabs>
            <Tabs TabBarStyle="font-size: small" TabBarClass="test1" @bind-ActiveKey="@activeKey">
                <TabPane Class="playoff-tabs" Style="font-size: small" Key="1">
                    <TabTemplate>1/8 finals</TabTemplate>
                    <ChildContent>
                        <MatchesBase Matches="@Matches16"></MatchesBase>
                    </ChildContent>
                </TabPane>
                <TabPane Class="playoff-tabs" Key="2">
                    <TabTemplate>1/4 finals</TabTemplate>
                    <ChildContent>
                        <MatchesBase Matches="@MatchesQuarter"></MatchesBase>
                    </ChildContent>
                </TabPane>
                <TabPane Class="playoff-tabs" Key="3">
                    <TabTemplate>1/2 finals</TabTemplate>
                    <ChildContent>
                        <MatchesBase Matches="@MatchesSemi"></MatchesBase>
                    </ChildContent>
                </TabPane>
                <TabPane Class="playoff-tabs" Key="4">
                    <TabTemplate>Final</TabTemplate>
                    <ChildContent>
                        <MatchesBase Matches="@MatchesFinal"></MatchesBase>
                    </ChildContent>
                </TabPane>
            </Tabs>
        </CardTabs>
    </Card>
}

<style>
    .playoff-tabs {
        margin: 0 0 0 12px !important;
    }
</style>

@code {
    [Parameter] public MatchDto Match { get; set; }
    [Parameter]
    public RenderFragment Title { get; set; }

    string activeKey { get; set; } = "1";
    List<MatchDto> Matches = new();
    List<MatchDto> Matches16 = new();
    List<MatchDto> MatchesQuarter = new();
    List<MatchDto> MatchesSemi = new();
    List<MatchDto> MatchesFinal = new();

    protected async override Task OnParametersSetAsync()
    {
        var es = await Server.Matches.GetPlayOffMatches();
        Matches = es.ToList();
        Matches16 = es.Where(x => x.PlayOffRound.Value == PlayOffRound.RoundOf16).ToList();
        MatchesQuarter = es.Where(x => x.PlayOffRound.Value == PlayOffRound.QuarterFinals).ToList();
        MatchesSemi = es.Where(x => x.PlayOffRound.Value == PlayOffRound.SemiFinals).ToList();
        MatchesFinal = es.Where(x => x.PlayOffRound.Value == PlayOffRound.Final).ToList();

        SetActiveKey();

        StateHasChanged();
    }

    private void SetActiveKey()
    {
        @if (Match?.PlayOffRound is not null)
        {
            @if (Match.PlayOffRound == PlayOffRound.RoundOf16)
            {
                activeKey = "1";
            }
            else if (Match.PlayOffRound == PlayOffRound.QuarterFinals)
            {
                activeKey = "2";
            }
            else if (Match.PlayOffRound == PlayOffRound.SemiFinals)
            {
                activeKey = "3";
            }
            else
            {
                activeKey = "4";
            }
        }
        else
        {
            if (MatchesFinal.Count() > 0)
            {
                activeKey = "4";
            }
            else if (MatchesSemi.Count() > 0)
            {
                activeKey = "3";
            }
            else if (MatchesQuarter.Count() > 0)
            {
                activeKey = "2";
            }
            else
            {
                activeKey = "1";
            }
        }

    }
}
