@using LA_LIGA_REKREATIVO.Shared.Dto;
@using LA_LIGA_REKREATIVO.Client.Services;
@using LA_LIGA_REKREATIVO.Client.Server;
@using Microsoft.Extensions.Localization

@inject Server Server
@inject NavigationManager Navigation
@inject IStringLocalizer<Shared.Matches.MatchesByGameTime> Localizer

<Spin Spinning=loading>
    <Select TItem="LeagueDto"
            TItemValue="int?"
            DataSource="@leagues"
            DefaultValue="@defaultvalue"
            LabelName="@nameof(LeagueDto.Name)"
            ValueName="@nameof(LeagueDto.Id)"
            Style="width: 100%; margin-bottom: 12px;"
            Placeholder=@Localizer["SelectLeague"]
            IgnoreItemChanges="false"
            OnSelectedItemChanged="OnSelectedLeague"
            AllowClear>
    </Select>

    @foreach (var matchesByRound in matches)
    {
        <Card Size="small" Style="margin-bottom: 12px;">
            <TitleTemplate>
                <span style="display: flex; justify-content: center">@matchesByRound.GameTime.ToString("dd. MMMM yyyy") </span>
            </TitleTemplate>
            <Body>
                <MatchesBase Matches="@matchesByRound.Matches"></MatchesBase>
            </Body>
        </Card>
    }
</Spin>

@code {
    public LeagueDto selectedLeague { get; set; }
    List<MatchesByGameTimeDto> matches = new List<MatchesByGameTimeDto>();
    private const string BUCKET_PATH = "https://test-la-liga-bucket.s3.amazonaws.com/";
    private List<LeagueDto> leagues = new();
    List<TeamStatsDto> stats = new();
    int defaultvalue;
    int selectedleagueId;
    bool loading;

    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected async override Task OnInitializedAsync()
    {
        loading = true;
        var leagueResult = await Server.Leagues.Get();
        leagues = leagueResult.ToList();
        if (leagues.Any())
        {
            selectedleagueId = leagues.FirstOrDefault().Id;
            selectedLeague = leagues.FirstOrDefault();

            defaultvalue = leagues.FirstOrDefault(x => x.IsOverallLeague) is not null ?
                                    leagues.FirstOrDefault(x => x.IsOverallLeague).Id :
                                    leagues.FirstOrDefault().Id;


            var matchesResults = selectedLeague.IsOverallLeague ?
                            await Server.Matches.GetByGameTimeOverall() :
                            await Server.Matches.GetByGameTime(selectedLeague.Id);

            matches = matchesResults.ToList();
        }
        loading = false;
    }

    private string GetImagePath(string imageName)
    {
        return BUCKET_PATH + imageName;
    }

    private async Task OnSelectedLeague(LeagueDto league)
    {
        if (league is null) return;

        loading = true;
        var result = league.IsOverallLeague ?
                  await Server.Matches.GetByGameTimeOverall() :
                  await Server.Matches.GetByGameTime(league.Id);

        matches = result.ToList();
        loading = false;
        StateHasChanged();
    }

    private void SetOrderId(List<TeamStatsDto> teamStats)
    {
        int orderId = 1;
        stats.ForEach(x => { x.OrderId = orderId; orderId++; });
        StateHasChanged();
    }

    public void SelectMatchDetails(int id)
    {
        Navigation.NavigateTo($"/matchDetails/{id}");
    }
}
