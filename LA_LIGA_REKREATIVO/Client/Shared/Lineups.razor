@using LA_LIGA_REKREATIVO.Client.Services
@using LA_LIGA_REKREATIVO.Shared.Dto
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject FileService _fileService;


<GridRow>
    <GridCol Span="12" Style="padding:4px;">
        <Collapse DefaultActiveKey="@(new[]{"1"})" Animation>
            @foreach (var player in Match.Players.Where(x => x.TeamId == Match.HomeTeam.Id))
            {
                <Panel Key="@player.Id.ToString()">
                    <HeaderTemplate>
                        <div style="word-break:break-word">
                            <span style="font-size:small">    @player.FirstName</span>
                            <span style="font-size: small; font-weight: 700;">@player.LastName</span>
                            <span style="float: right; font-weight: 700;">
                                @GetTotalPoint(player)
                                <Icon Type="star" Theme="outline" />
                            </span>


                        </div>
                    </HeaderTemplate>
                    <ChildContent>
                        <div>
                            <div>
                                <Tooltip Title="Match attended 2 pts" Style="padding-right: 10%">
                                    <img height="24px;" src="./football-jersey.png" />
                                </Tooltip>
                                @foreach (var item in Match.Summaries.Where(x => x.Player.Id == player.Id))
                                {
                                    <Tooltip Title="@pp(item.Type)" Style="padding-right: 10%;">
                                        <img height="24px;" src="@_fileService.GetImgSrc(item.Type)" />
                                    </Tooltip>
                                }
                            </div>
                            <div style="display: flex; justify-content: center;padding-top: 8px;">
                                <Button Size="@AntDesign.ButtonSize.Small" Type="@AntDesign.ButtonType.Primary" OnClick="() => GoToPlayerProfile(player.Id)">Player profile</Button>
                            </div>
                        </div>
                    </ChildContent>
                </Panel>
            }
        </Collapse>
    </GridCol>
    <GridCol Span="12" Style="padding:4px;">
        <Collapse DefaultActiveKey="@(new[]{"1"})" Animation>
            @foreach (var player in Match.Players.Where(x => x.TeamId == Match.AwayTeam.Id))
            {
                <Panel Key="@player.Id.ToString()">
                    <HeaderTemplate>
                        <div style="word-break:break-word">
                            <span style="font-size:small">    @player.FirstName</span>
                            <span style="font-size: small; font-weight: 700;">@player.LastName</span>
                            <span style="float: right; font-weight: 700;">
                                @GetTotalPoint(player)
                                <Icon Type="star" Theme="outline" />
                            </span>
                        </div>

                    </HeaderTemplate>
                    <ChildContent>
                        <div>
                            <div>
                                    <Tooltip Title="Match attended 2 pts" Style="padding-right: 10%">
                                    <img height="24px;" src="./football-jersey.png" />
                                </Tooltip>
                                @foreach (var item in Match.Summaries.Where(x => x.Player.Id == player.Id))
                                {
                                    <Tooltip Title="@item.Type.ToString()" Style="padding-right: 10%;">
                                        <img height="24px;" src="@_fileService.GetImgSrc(item.Type)" />
                                    </Tooltip>
                                }
                            </div>
                            <div style="display: flex; justify-content: center;padding-top: 8px;">
                                <Button Size="@AntDesign.ButtonSize.Small" Type="@AntDesign.ButtonType.Primary" OnClick="() => GoToPlayerProfile(player.Id)">Player profile</Button>
                            </div>
                        </div>
                    </ChildContent>
                </Panel>
            }
        </Collapse>
    </GridCol>
</GridRow>

@code {
    [Parameter] public MatchDto Match { get; set; }

    private double GetTotalPoint(PlayerDto playerDto)
    {
        var summaries = Match.Summaries.Where(x => x.Player.Id == playerDto.Id).ToList();
        double totalPoints = 0;
        foreach (var sum in summaries)
        {
            var temp = sum.Type switch
            {
                SummaryType.Goal => totalPoints += 5,
                SummaryType.Assist => totalPoints += 2,
                SummaryType.OwnGoal => totalPoints -= 3,
                SummaryType.YellowCards => totalPoints -= 2,
                SummaryType.RedCards => totalPoints -= 7,
                SummaryType.MissedPenalty => totalPoints -= 3,
                SummaryType.Missed10meter => totalPoints -= 2,
                SummaryType.CleanSheetGK => totalPoints += 5,
                SummaryType.FourSavesGK => totalPoints += 1,
                SummaryType.SavedFromPenaltyGK => totalPoints += 3,
                SummaryType.SavedFrom10meterGK => totalPoints += 2
            };
        }
        totalPoints += 2; //match attended
        return totalPoints;
    }

    private void GoToPlayerProfile(int playerId)
    {
        Navigation.NavigateTo($"/playerProfile/{playerId}");
    }

    private string pp(SummaryType type)
    {
        var aa =  EnumHelper<SummaryType>.GetDisplayValue(type);
        return aa;
    }

    public static class EnumHelper<T>
    where T : struct, Enum // This constraint requires C# 7.3 or later.
    {
        public static IList<T> GetValues(Enum value)
        {
            var enumValues = new List<T>();

            foreach (FieldInfo fi in value.GetType().GetFields(BindingFlags.Static | BindingFlags.Public))
            {
                enumValues.Add((T)Enum.Parse(value.GetType(), fi.Name, false));
            }
            return enumValues;
        }

        public static T Parse(string value)
        {
            return (T)Enum.Parse(typeof(T), value, true);
        }

        public static IList<string> GetNames(Enum value)
        {
            return value.GetType().GetFields(BindingFlags.Static | BindingFlags.Public).Select(fi => fi.Name).ToList();
        }

        public static IList<string> GetDisplayValues(Enum value)
        {
            return GetNames(value).Select(obj => GetDisplayValue(Parse(obj))).ToList();
        }

        private static string lookupResource(Type resourceManagerProvider, string resourceKey)
        {
            var resourceKeyProperty = resourceManagerProvider.GetProperty(resourceKey,
                BindingFlags.Static | BindingFlags.Public, null, typeof(string),
                new Type[0], null);
            if (resourceKeyProperty != null)
            {
                return (string)resourceKeyProperty.GetMethod.Invoke(null, null);
            }

            return resourceKey; // Fallback with the key name
        }

        public static string GetDisplayValue(T value)
        {
            var fieldInfo = value.GetType().GetField(value.ToString());

            var descriptionAttributes = fieldInfo.GetCustomAttributes(
                typeof(DisplayAttribute), false) as DisplayAttribute[];

            if (descriptionAttributes != null && descriptionAttributes[0].ResourceType != null)
                return lookupResource(descriptionAttributes[0].ResourceType, descriptionAttributes[0].Name);

            if (descriptionAttributes == null) return string.Empty;
            return (descriptionAttributes.Length > 0) ? descriptionAttributes[0].Name : value.ToString();
        }
    }
}
