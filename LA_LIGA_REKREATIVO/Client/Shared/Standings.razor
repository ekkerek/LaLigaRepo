@using LA_LIGA_REKREATIVO.Client.Server;
@using LA_LIGA_REKREATIVO.Shared.Dto;
@using Microsoft.Extensions.Localization

@inject Server Server;
@inject IStringLocalizer<Shared.Standings> Localizer

<Table @ref="standingsTable"
       TItem="TeamStatsDto"
       DataSource="@stats"
       Size="TableSize.Small"
       HidePagination>
    <PropertyColumn Title="#" Property="c=>c.OrderId"></PropertyColumn>
    <PropertyColumn Title=@Localizer["Name"] Property="c=>c.Team.Name" />
    <PropertyColumn Align="ColumnAlign.Center" Title=@Localizer["MP"] Property="c=>c.GamePlayed" />
    <PropertyColumn Align="ColumnAlign.Center" Title=@Localizer["G"] Property="c=>c.Goals">
        @context.Goals:@context.GoalsConceded
    </PropertyColumn>
    @if (League.IsOverallLeague)
    {
        <PropertyColumn Align="ColumnAlign.Center" Title="CP" Property="c=>c.PointsByCoefficient" />
    }
    else
    {
        <PropertyColumn Align="ColumnAlign.Center" Title=@Localizer["PTS"] Property="c=>c.TotalPoints" />
    }

</Table>

@code {
    [Parameter] public LeagueDto League { get; set; }
    TeamStatsDto teamStats = new();
    List<TeamStatsDto> stats = new();
    bool loading;
    public Table<TeamStatsDto> standingsTable = null!;
    [Parameter]
    public EventCallback<bool> IsLoading { get; set; }

    protected async override Task OnInitializedAsync()
    {
        stats = League.IsOverallLeague ?
           await Server.Teams.GetCommonStanding() :
           await Server.Teams.GetStandingsByLeague(League.Id);

        SetOrderId(stats);
        //base.OnInitialized();
    }

    public async Task ReloadData(LeagueDto league)
    {
        League = league;
        //await OnInitializedAsync();
        // loading = true;
        stats = league.IsOverallLeague ?
          await Server.Teams.GetCommonStanding() :
          await Server.Teams.GetStandingsByLeague(league.Id);
        SetOrderId(stats);
        await IsLoading.InvokeAsync(true);
        StateHasChanged();
    }

    private void SetOrderId(List<TeamStatsDto> teamStats)
    {
        int orderId = 1;
        stats.ForEach(x => { x.OrderId = orderId; orderId++; });
        StateHasChanged();
    }
}
