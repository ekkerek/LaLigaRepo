@page "/standings"
@using LA_LIGA_REKREATIVO.Client.Server;
@using LA_LIGA_REKREATIVO.Shared.Dto
@inject Server Server;

<Select TItem="LeagueDto"
        TItemValue="int?"
        DataSource="@leagues"
        DefaultValue="10000"
        LabelName="@nameof(LeagueDto.Name)"
        ValueName="@nameof(LeagueDto.Id)"
        Style="width: 200px"
        Placeholder="Select a league"
        IgnoreItemChanges="false"
        OnSelectedItemChanged="OnSelectedLeague"
        AllowClear>
</Select>

<Table TItem="TeamStatsDto"
       DataSource="@stats"
       Size="TableSize.Small"
       HidePagination>
    <PropertyColumn Title="#" Property="c=>c.OrderId"></PropertyColumn>
    <PropertyColumn Title="Name" Property="c=>c.Team.Name" />
    <PropertyColumn Title="MP" Property="c=>c.GamePlayed" />
    <PropertyColumn Title="G" Property="c=>c.Goals">
        @context.Goals:@context.GoalsConceded
    </PropertyColumn>
    <PropertyColumn Title="PTS" Property="c=>c.TotalPoints" />
</Table>

@* <Collapse DefaultActiveKey="@(new[]{"5"})" Animation>
    @foreach (var league in leagues)
    {
        <Panel Header="@league.Name" Key="@league.Id.ToString()">
            <Standings LeagueId="league.Id"></Standings>
        </Panel>
    }
</Collapse> *@

@code {
    private List<LeagueDto> leagues = new();
    List<TeamStatsDto> stats = new();
    int defaultvalue = 1;

    protected async override Task OnParametersSetAsync()
    {
        var result = await Server.Leagues.GetLeaguesIncudeOverall();
        leagues = result.ToList();

        stats = await Server.Matches.GetCommonStanding();//Server.Matches.GetStandingsByLeague(leagues.FirstOrDefault().Id);
        SetOrderId(stats);
        StateHasChanged();
    }

    private async Task OnSelectedLeague(LeagueDto league)
    {
        if (league is null) return;
        if (league.Name == "OverallLeague")
        {
            stats = await Server.Matches.GetCommonStanding();
        }
        else
        {
            stats = await Server.Matches.GetStandingsByLeague(league.Id);
        }

        SetOrderId(stats);
        //var leagueId = Int32.Parse(league.Id);
        // LeagueDto tempLeague = new()
        //     {
        //         Id = league.Id,
        //         Name = leagues.FirstOrDefault(x => x.Id == league.Id).Name,
        //         Year = leagues.FirstOrDefault(x => x.Id == league.Id).Year
        //     };
        // match.League = tempLeague;
        // teams = await Server.Teams.GetTeamsByLeague(league.Id);
        StateHasChanged();
    }

    private void SetOrderId(List<TeamStatsDto> teamStats)
    {
        int orderId = 1;
        stats.ForEach(x => { x.OrderId = orderId; orderId++; });
        StateHasChanged();
    }
}
