@page "/standings"
@using LA_LIGA_REKREATIVO.Client.Server;
@using LA_LIGA_REKREATIVO.Client.Services;
@using LA_LIGA_REKREATIVO.Shared.Dto;

@inject Server Server
@inject FileService _fileService
@inject NavigationManager Navigation

<Spin Spinning=loading>
    <Select TItem="LeagueDto"
            TItemValue="int?"
            DataSource="@leagues"
            DefaultValue="@defaultvalue"
            LabelName="@nameof(LeagueDto.Name)"
            ValueName="@nameof(LeagueDto.Id)"
            Style="width: 100%; margin-bottom: 12px;"
            Placeholder="Select a league"
            IgnoreItemChanges="false"
            OnSelectedItemChanged="OnSelectedLeague"
            AllowClear>
    </Select>

    <Table TItem="TeamStatsDto"
           DataSource="@stats"
           Size="TableSize.Small"
           HidePagination>
        <PropertyColumn Title="#" Property="c=>c.OrderId"></PropertyColumn>
        <PropertyColumn Title="Name" Property="c=>c.Team.Name">
            <GridRow>
                <GridCol Style="display: flex; align-items: center; justify-content: left" Span="5"><img style="height:18px;" src="@_fileService.GetTeamImagePath(context.Team.LogoSrc)" /></GridCol>
                <GridCol Span="19">
                    <a @onclick="() => GoToTeamDetails(context.Team.Id)">
                        @context.Team.Name
                    </a>
                </GridCol>
            </GridRow>
        </PropertyColumn>
        <PropertyColumn Align="ColumnAlign.Center" Title="MP" Property="c=>c.GamePlayed" />
        <PropertyColumn Align="ColumnAlign.Center" Title="G" Property="c=>c.Goals">
            @context.Goals:@context.GoalsConceded
        </PropertyColumn>
        <PropertyColumn Align="ColumnAlign.Center" Title="PTS" Property="c=>c.TotalPoints" />
        <PropertyColumn Align="ColumnAlign.Center" Title="CP" Property="c=>c.PointsByCoefficient" />
    </Table>

</Spin>

@code {
    private List<LeagueDto> leagues = new();
    List<TeamStatsDto> stats = new();
    int defaultvalue;
    int selectedleagueId;
    bool loading;

    protected async override Task OnParametersSetAsync()
    {
        loading = true;
        var result = await Server.Leagues.Get();
        leagues = result.ToList();

        selectedleagueId = leagues.FirstOrDefault().Id;

        defaultvalue = leagues.FirstOrDefault(x => x.IsOverallLeague) is not null ?
                       leagues.FirstOrDefault(x => x.IsOverallLeague).Id :
                       leagues.FirstOrDefault().Id;

        stats = await Server.Teams.GetCommonStanding();
        SetOrderId(stats);
        StateHasChanged();
        loading = false;
    }

    private async Task OnSelectedLeague(LeagueDto league)
    {
        if (league is null) return;

        loading = true;
        selectedleagueId = league.Id;
        if (league.IsOverallLeague)
            stats = await Server.Teams.GetCommonStanding();
        else
            stats = await Server.Teams.GetStandingsByLeague(league.Id);

        SetOrderId(stats);
        StateHasChanged();
        loading = false;
    }

    private void SetOrderId(List<TeamStatsDto> teamStats)
    {
        int orderId = 1;
        stats.ForEach(x => { x.OrderId = orderId; orderId++; });
        StateHasChanged();
    }

    private void GoToTeamDetails(int teamId)
    {
        Navigation.NavigateTo($"/team/{teamId}");
    }
}
