@page "/standings"
@using LA_LIGA_REKREATIVO.Client.Server;
@using LA_LIGA_REKREATIVO.Client.Shared.Matches
@using LA_LIGA_REKREATIVO.Shared.Dto
@inject Server Server;

<Spin Spinning=loading>
    <Select TItem="LeagueDto"
            TItemValue="int?"
            DataSource="@leagues"
            DefaultValue="@defaultvalue"
            LabelName="@nameof(LeagueDto.Name)"
            ValueName="@nameof(LeagueDto.Id)"
            Style="width: 200px"
            Placeholder="Select a league"
            IgnoreItemChanges="false"
            OnSelectedItemChanged="OnSelectedLeague"
            AllowClear>
    </Select>

    <Tabs Size="TabSize.Small" @bind-ActiveKey="@activeKey" Animated>
        <TabPane Tab="Standings" Key="1">
            @if (selectedLeague is not null && selectedLeague.Id > 0)
            {
                <Standings @ref="standingsss" League="selectedLeague"></Standings>
            }
        </TabPane>
        <TabPane Tab="Teams" Key="2">
            <MatchesByRound @ref="matchesByRound" League="selectedLeague"></MatchesByRound>
        </TabPane>
    </Tabs>
</Spin>

@code {
    private List<LeagueDto> leagues = new();
    List<TeamStatsDto> stats = new();
    int defaultvalue;
    int selectedleagueId;
    bool loading;
    string activeKey { get; set; } = "1";
    LeagueDto selectedLeague { get; set; } = new();
    int activeButton = 1;
    private Standings standingsss;
    private MatchesByRound matchesByRound;

    protected async override Task OnParametersSetAsync()
    {
        // loading = true;
        var result = await Server.Leagues.Get();
        leagues = result.ToList();


        // selectedleagueId = leagues.FirstOrDefault().Id;
        selectedLeague = leagues.FirstOrDefault(x => x.IsOverallLeague) is not null ? leagues.FirstOrDefault(x => x.IsOverallLeague) : leagues.FirstOrDefault();
        defaultvalue = leagues.FirstOrDefault(x => x.IsOverallLeague) is not null ? leagues.FirstOrDefault(x => x.IsOverallLeague).Id : leagues.FirstOrDefault().Id;



        // stats = await Server.Matches.GetCommonStanding();
        // SetOrderId(stats);
        // StateHasChanged();
        // loading = false;
    }


    private void ChangeActiveButton()
    {
        activeButton = 1;
        StateHasChanged();
    }

    private void ChangeActiveButton2()
    {
        activeButton = 2;
        StateHasChanged();
    }

    private async Task OnSelectedLeague(LeagueDto league)
    {
        if (league is null) return;

        loading = true;
        selectedleagueId = league.Id;
        selectedLeague = league;
        //standingsss.League = league;
        //standingsss.Test();
        await standingsss.ReloadData(league);
        await matchesByRound.ReloadData(league);
        // await matchesByRound.ReloadData25(league);
        //standingsss.standingsTable.ReloadData();
        // if (league.IsOverallLeague)
        //     stats = await Server.Matches.GetCommonStanding();
        // else
        //     stats = await Server.Matches.GetStandingsByLeague(league.Id);

        // SetOrderId(stats);
        // StateHasChanged();
        loading = false;
        //StateHasChanged();
    }

    // private void SetOrderId(List<TeamStatsDto> teamStats)
    // {
    //     int orderId = 1;
    //     stats.ForEach(x => { x.OrderId = orderId; orderId++; });
    //     StateHasChanged();
    // }
}
