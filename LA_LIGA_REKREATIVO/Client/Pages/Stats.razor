@page "/stats"
@using LA_LIGA_REKREATIVO.Client.Services
@using LA_LIGA_REKREATIVO.Shared.Dto
@using LA_LIGA_REKREATIVO.Client.Server;

@inject Server Server
@inject NavigationManager Navigation
@inject FileService _fileService;

<Spin Spinning=loading>
    <div style="display: flex; justify-content: space-between; margin-bottom: 12px;">
        <Select TItem="LeagueDto"
                TItemValue="int?"
                DataSource="@leagues"
                DefaultValue="@defaultLeagueId"
                LabelName="@nameof(LeagueDto.Name)"
                ValueName="@nameof(PlayerDto.Id)"
                Style="width: 60%"
                Placeholder="Select a league"
                IgnoreItemChanges="false"
                OnSelectedItemChanged="OnSelectedLeague"
                AllowClear>
        </Select>

        <SimpleSelect Style="width:40%;" Value="@stattt" DefaultValue="Total Goals" OnSelectedItemChanged="SelectStatType">
            <SelectOptions>
                @foreach (var stat in statsType)
                {
                    <SimpleSelectOption Value="@stat" Label="@stat"></SimpleSelectOption>
                }
            </SelectOptions>
        </SimpleSelect>
    </div>

    <Table TItem="PlayerStatsDto"
           DataSource="@stats"
           Size="TableSize.Small"
           HidePagination>
        <PropertyColumn Title="#" Property="c=> c.OrderId"></PropertyColumn>
        <PropertyColumn Title="Name" Property="c=>c.Player.Picture">
            <span>
                <img class="player-img" src="@_fileService.GetImagePath(context.Player.Picture)" />
            </span>
            <span>
                <a style="display: inline-grid" @onclick="() => GoToProfilePage(context.Player.Id)">
                    <span>@context.Player.FullName</span>
                    <span style="font-size: smaller"> @context.Team.Name </span>
                </a>
            </span>
        </PropertyColumn>

        @if (stattt == "FantasyPoints")
        {
            <PropertyColumn Title="Points" Property="c=>c.TotalPoints" />
        }
        else if (stattt == "Total Goals")
        {
            <PropertyColumn Title="Goals" Property="c=>c.Goals" />
        }
        else if (stattt == "TotalAssists")
        {
            <PropertyColumn Title="Assists" Property="c=>c.Assists" />
        }
        else if (stattt == "OwnGoals")
        {
            <PropertyColumn Title="Own Goals" Property="c=>c.OwnGoals" />
        }
        else if (stattt == "GoalsPerMatch")
        {
            <PropertyColumn Title="Goals Per Match" Property="c=>c.GoalsPerMatch">
                @context.GoalsPerMatch.ToString("F1")
            </PropertyColumn>
        }
        else if (stattt == "YellowCards")
        {
            <PropertyColumn Title="Yellow Cards" Property="c=>c.YellowCards" />
        }
        else if (stattt == "RedCards")
        {
            <PropertyColumn Title="Red Cards" Property="c=>c.RedCards" />
        }
        else if (stattt == "CleanSheetGK")
        {
            <PropertyColumn Title="Clean Sheet GK" Property="c=>c.CleanSheetGK" />
        }
        else if (stattt == "FourSavesGK")
        {
            <PropertyColumn Title="Four Saves GK" Property="c=>c.FourSavesGK" />
        }
        else if (stattt == "SavedFromPenaltyGK")
        {
            <PropertyColumn Title="Saved From Penalty GK" Property="c=>c.SavedFromPenaltyGK" />
        }
        else if (stattt == "SavedFrom10meterGK")
        {
            <PropertyColumn Title="Saves From 10 meter GK" Property="c=>c.SavedFrom10meterGK" />
        }
    </Table>
</Spin>

@code {
    string _selectedValue1, _selectedValue2, _selectedValue3;
    private bool loading;
    List<string> statsType = new List<string>()
                { "FantasyPoints","Total Goals", "TotalAssists", "OwnGoals", "GoalsPerMatch", "YellowCards", "RedCards", "CleanSheetGK", "FourSavesGK", "SavedFromPenaltyGK", "SavedFrom10meterGK" };


    string stattt = "FantasyPoints";
    private List<LeagueDto> leagues = new();

    private List<PlayerStatsDto> stats = new();
    public bool InitLoading { get; set; } = true;
    int defaultLeagueId;

    protected async override Task OnParametersSetAsync()
    {
        loading = true;
        var result = await Server.Leagues.Get();
        leagues = result.ToList();
        if (leagues.Any())
        {
            defaultLeagueId = leagues.FirstOrDefault(x => x.IsOverallLeague) is not null ?
                           leagues.FirstOrDefault(x => x.IsOverallLeague).Id :
                           leagues.FirstOrDefault().Id;

            var resStats = leagues.FirstOrDefault(x => x.IsOverallLeague) is not null ?
                           await Server.Players.GetPlayersStatsOverall() :
                           await Server.Players.GetPlayersStats(defaultLeagueId);

            stats = resStats.OrderByDescending(x => x.TotalPoints).ToList();

            SetOrderId(stats);
            StateHasChanged();
        }
        loading = false;
    }

    private void GoToProfilePage(int id)
    {
        Navigation.NavigateTo($"/playerProfile/{id}");
    }

    public async void SelectStatType(string value)
    {
        if (value is null)
        {
            return;
        }
        else if (value == "FantasyPoints")
        {
            stattt = value;
            stats = stats.OrderByDescending(x => x.TotalPoints).ToList();
            SetOrderId(stats);
        }
        else if (value == "Total Goals")
        {
            stattt = value;
            stats = stats.OrderByDescending(x => x.Goals).ToList();
            SetOrderId(stats);
        }
        else if (value == "TotalAssists")
        {
            stattt = value;
            stats = stats.OrderByDescending(x => x.Assists).ToList();
            SetOrderId(stats);
        }
        else if (value == "OwnGoals")
        {
            stattt = value;
            stats = stats.OrderByDescending(x => x.OwnGoals).ToList();
            SetOrderId(stats);
        }
        else if (value == "GoalsPerMatch")
        {
            stattt = value;
            stats = stats.OrderByDescending(x => x.GoalsPerMatch).ToList();
            SetOrderId(stats);
        }
        else if (value == "YellowCards")
        {
            stattt = value;
            stats = stats.OrderByDescending(x => x.YellowCards).ToList();
            SetOrderId(stats);
        }
        else if (value == "RedCards")
        {
            stattt = value;
            stats = stats.OrderByDescending(x => x.RedCards).ToList();
            SetOrderId(stats);
        }
        else if (value == "CleanSheetGK")
        {
            stattt = value;
            stats = stats.OrderByDescending(x => x.CleanSheetGK).ToList();
            SetOrderId(stats);
        }
        else if (value == "FourSavesGK")
        {
            stattt = value;
            stats = stats.OrderByDescending(x => x.FourSavesGK).ToList();
            SetOrderId(stats);
        }
        else if (value == "SavedFromPenaltyGK")
        {
            stattt = value;
            stats = stats.OrderByDescending(x => x.SavedFromPenaltyGK).ToList();
            SetOrderId(stats);
        }
        else if (value == "SavedFrom10meterGK")
        {
            stattt = value;
            stats = stats.OrderByDescending(x => x.SavedFrom10meterGK).ToList();
            SetOrderId(stats);
        }
    }

    private void SetOrderId(List<PlayerStatsDto> playerStats)
    {
        int orderId = 1;
        playerStats.ForEach(x => { x.OrderId = orderId; orderId++; });
        StateHasChanged();
    }

    private async Task OnSelectedLeague(LeagueDto league)
    {
        if (league is null) return;

        loading = true;
        List<PlayerStatsDto> resStats = new();
        if (league.IsOverallLeague)
        {
            var result = await Server.Players.GetPlayersStatsOverall();
            resStats = result.ToList();
        }
        else
        {
            var res = await Server.Players.GetPlayersStats(league.Id);
            resStats = res.ToList();
        }

        SelectStatType("FantasyPoints");
        stats = resStats.OrderByDescending(x => x.TotalPoints).ToList();
        SetOrderId(stats);
        StateHasChanged();
        loading = false;
    }
}
