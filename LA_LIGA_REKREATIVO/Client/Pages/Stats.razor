@page "/stats"
@using LA_LIGA_REKREATIVO.Client.Services
@using LA_LIGA_REKREATIVO.Shared.Dto
@using LA_LIGA_REKREATIVO.Client.Server;
@inject Server Server
@inject NavigationManager Navigation
@inject FileService _fileService;

<Spin Spinning=loading>
    <Select TItem="LeagueDto"
            TItemValue="int?"
            DataSource="@leagues"
            DefaultValue="@defaultLeagueId"
            LabelName="@nameof(LeagueDto.Name)"
            ValueName="@nameof(PlayerDto.Id)"
            Style="width: 200px"
            Placeholder="Select a league"
            IgnoreItemChanges="false"
            OnSelectedItemChanged="OnSelectedLeague"
            AllowClear>
    </Select>

    <SimpleSelect Style="width:120px;" Value="@stattt" DefaultValue="Total Goals" OnSelectedItemChanged="SelectStatType">
        <SelectOptions>
            @foreach (var stat in statsType)
            {
                <SimpleSelectOption Value="@stat" Label="@stat"></SimpleSelectOption>
            }
        </SelectOptions>
    </SimpleSelect>

    <Table TItem="PlayerStatsDto"
           DataSource="@stats"
           Size="TableSize.Small"
           HidePagination>
        <PropertyColumn Title="#" Property="c=> c.OrderId"></PropertyColumn>
        <PropertyColumn Title="Name" Property="c=>c.Player.Picture">
            <span><img style="height:34px; width:34px; border-radius: 50%;" src="@_fileService.GetImagePath(context.Player.Picture)" /></span>
            <span>@context.Player.FirstName @context.Player.LastName</span>
        </PropertyColumn>

        @if (stattt == "Total Goals")
        {
            <PropertyColumn Title="Goals" Property="c=>c.Goals" />
        }
        else if (stattt == "TotalAssists")
        {
            <PropertyColumn Title="Assists" Property="c=>c.Assists" />
        }
        else if (stattt == "OwnGoals")
        {
            <PropertyColumn Title="Own Goals" Property="c=>c.OwnGoals" />
        }
        else if (stattt == "GoalsPerMatch")
        {
            <PropertyColumn Title="Goals Per Match" Property="c=>c.GoalsPerMatch" />
        }
        else if (stattt == "YellowCards")
        {
            <PropertyColumn Title="Yellow Cards" Property="c=>c.YellowCards" />
        }
        else if (stattt == "RedCards")
        {
            <PropertyColumn Title="Red Cards" Property="c=>c.RedCards" />
        }
        else if (stattt == "CleanSheetGK")
        {
            <PropertyColumn Title="Clean Sheet GK" Property="c=>c.CleanSheetGK" />
        }
        else if (stattt == "FourSavesGK")
        {
            <PropertyColumn Title="Four Saves GK" Property="c=>c.FourSavesGK" />
        }
        else if (stattt == "SavedFromPenaltyGK")
        {
            <PropertyColumn Title="Saved From Penalty GK" Property="c=>c.SavedFromPenaltyGK" />
        }
        else if (stattt == "SavedFrom10meterGK")
        {
            <PropertyColumn Title="Saves From 10 meter GK" Property="c=>c.SavedFrom10meterGK" />
        }
    </Table>
</Spin>

@code {
    string _selectedValue1, _selectedValue2, _selectedValue3;
    private bool loading;
    List<string> statsType = new List<string>()
                { "Total Goals", "TotalAssists", "OwnGoals", "GoalsPerMatch", "YellowCards", "RedCards", "CleanSheetGK", "FourSavesGK", "SavedFromPenaltyGK", "SavedFrom10meterGK" };


    string stattt = "Total Goals";
    private List<LeagueDto> leagues = new();

    private List<PlayerStatsDto> stats = new();
    public bool InitLoading { get; set; } = true;
    int defaultLeagueId;

    protected async override Task OnParametersSetAsync()
    {
        loading = true;
        var result = await Server.Leagues.Get();
        leagues = result.ToList();
        var resStats = await Server.Players.GetPlayersStatsOverall();
        stats = resStats.OrderByDescending(x => x.Goals).ToList();
        defaultLeagueId = leagues.FirstOrDefault().Id;
        SetOrderId(stats);
        StateHasChanged();
        loading = false;
    }

    private void GoToProfilePage(int id)
    {
        Navigation.NavigateTo($"/playerProfile/{id}");
    }

    public async void SelectStatType(string value)
    {
        if (value is null)
        {
            return;
        }
        else if (value == "Total Goals")
        {
            stattt = value;
            //var resStats = await Server.Players.GetDreamTeamByLeague(5);
            var i = 1;
            stats = stats.Where(x => x.Goals > 0).OrderByDescending(x => x.Goals).ToList();
            SetOrderId(stats);
        }
        else if (value == "TotalAssists")
        {
            stattt = value;
            //var resStats = await Server.Players.GetDreamTeamByLeague(5);
            stats = stats.OrderByDescending(x => x.Assists).ToList();
            SetOrderId(stats);
        }
        else if (value == "OwnGoals")
        {
            stattt = value;
            //var resStats = await Server.Players.GetDreamTeamByLeague(5);
            stats = stats.OrderByDescending(x => x.OwnGoals).ToList();
            SetOrderId(stats);
        }
        else if (value == "GoalsPerMatch")
        {
            stattt = value;
            //var resStats = await Server.Players.GetDreamTeamByLeague(5);
            stats = stats.OrderByDescending(x => x.GoalsPerMatch).ToList();
            SetOrderId(stats);
        }
        else if (value == "YellowCards")
        {
            stattt = value;
            //var resStats = await Server.Players.GetDreamTeamByLeague(5);
            stats = stats.OrderByDescending(x => x.YellowCards).ToList();
            SetOrderId(stats);
        }
        else if (value == "RedCards")
        {
            stattt = value;
            //var resStats = await Server.Players.GetDreamTeamByLeague(5);
            stats = stats.OrderByDescending(x => x.RedCards).ToList();
            SetOrderId(stats);
        }
        else if (value == "CleanSheetGK")
        {
            stattt = value;
            //var resStats = await Server.Players.GetDreamTeamByLeague(5);
            stats = stats.OrderByDescending(x => x.CleanSheetGK).ToList();
            SetOrderId(stats);
        }
        else if (value == "FourSavesGK")
        {
            stattt = value;
            //var resStats = await Server.Players.GetDreamTeamByLeague(5);
            stats = stats.OrderByDescending(x => x.FourSavesGK).ToList();
            SetOrderId(stats);
        }
        else if (value == "SavedFromPenaltyGK")
        {
            stattt = value;
            //var resStats = await Server.Players.GetDreamTeamByLeague(5);
            stats = stats.OrderByDescending(x => x.SavedFromPenaltyGK).ToList();
            SetOrderId(stats);
        }
        else if (value == "SavedFrom10meterGK")
        {
            stattt = value;
            //var resStats = await Server.Players.GetDreamTeamByLeague(5);
            stats = stats.OrderByDescending(x => x.SavedFrom10meterGK).ToList();
            SetOrderId(stats);
        }
        //StateHasChanged();
    }

    private void SetOrderId(List<PlayerStatsDto> playerStats)
    {
        int orderId = 1;
        playerStats.ForEach(x => { x.OrderId = orderId; orderId++; });
        StateHasChanged();
    }

    private async Task OnSelectedLeague(LeagueDto league)
    {
        if (league is null) return;

        loading = true;
        List<PlayerStatsDto> resStats = new();
        if (league.IsOverallLeague)
        {
            var result = await Server.Players.GetPlayersStatsOverall();
            resStats = result.ToList();
        }
        else
        {
            var res = await Server.Players.GetPlayersStats(league.Id);
            resStats = res.ToList();
        }

        SelectStatType("Total Goals");
        stats = resStats.OrderByDescending(x => x.Goals).ToList();
        SetOrderId(stats);
        StateHasChanged();
        loading = false;
    }
}
